/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_vector3d_free(a: number): void;
export function vector3d_create(a: number, b: number, c: number): number;
export function vector3d_get_x(a: number): number;
export function vector3d_get_y(a: number): number;
export function vector3d_get_z(a: number): number;
export function vector3d_set(a: number, b: number, c: number, d: number): void;
export function vector3d_move_by(a: number, b: number): void;
export function vector3d_add(a: number, b: number): void;
export function vector3d_subtract(a: number, b: number): void;
export function vector3d_diff(a: number, b: number): number;
export function vector3d_scale_by(a: number, b: number): void;
export function vector3d_size(a: number): number;
export function vector3d_angle(a: number): number;
export function vector3d_normalize(a: number): void;
export function vector3d_scale(a: number, b: number, c: number, d: number): void;
export function vector3d_clone(a: number): number;
export function __wbg_particle_free(a: number): void;
export function particle_create(a: number, b: number): number;
export function particle_get_x(a: number): number;
export function particle_get_y(a: number): number;
export function particle_get_z(a: number): number;
export function particle_is_locked(a: number): number;
export function particle_lock(a: number): void;
export function particle_unlock(a: number): void;
export function particle_get_restitution(a: number): number;
export function particle_get_friction(a: number): number;
export function particle_get_radius(a: number): number;
export function particle_get_velocity(a: number): number;
export function particle_get_direction(a: number): number;
export function particle_reset(a: number): void;
export function particle_set_restitution(a: number, b: number): void;
export function particle_set_friction(a: number, b: number): void;
export function particle_set_radius(a: number, b: number): void;
export function particle_update(a: number): void;
export function particle_collide_walls(a: number, b: number, c: number, d: number): void;
export function particle_accelerate(a: number, b: number, c: number, d: number): void;
export function particle_accelerate_by(a: number, b: number): void;
export function particle_gravitate(a: number, b: number, c: number, d: number): void;
export function particle_gravitate_by(a: number, b: number): void;
